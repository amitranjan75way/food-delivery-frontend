{
  "/customer/addItemToCart/{restaurantId}/{itemId}": {
    "post": {
      "summary": "Add or remove an item to/from the cart",
      "tags": ["Customers"],
      "parameters": [
        {
          "name": "restaurantId",
          "in": "path",
          "required": true,
          "description": "The ID of the restaurant",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "itemId",
          "in": "path",
          "required": true,
          "description": "The ID of the menu item",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Item added to or removed from the cart successfully",
          "content": {
            "application/json": {
              "example": {
                "success": true,
                "data": {
                  "cartId": "63f21c84e7a51093c507d202",
                  "items": [
                    {
                      "id": "63f21c84e7a51093c507d203",
                      "name": "Pizza",
                      "price": 10
                    }
                  ],
                  "totalAmount": 10,
                  "restaurantId": "63f21c84e7a51093c507d204"
                },
                "message": "Item added to cart successfully"
              }
            }
          }
        },
        "404": {
          "description": "Resource not found",
          "content": {
            "application/json": {
              "example": {
                "success": false,
                "error_code": 404,
                "message": "Item or customer/cart not found",
                "data": {}
              }
            }
          }
        }
      }
    }
  },
  "/customer/restaurantList": {
    "get": {
      "summary": "Get the list of all restaurants",
      "tags": ["Customers"],
      "responses": {
        "200": {
          "description": "List of restaurants fetched successfully",
          "content": {
            "application/json": {
              "example": {
                "success": true,
                "data": [
                  {
                    "id": "63f21c84e7a51093c507d205",
                    "name": "Italian Bistro",
                    "address": "123 Main St"
                  },
                  {
                    "id": "63f21c84e7a51093c507d206",
                    "name": "Sushi House",
                    "address": "456 Elm St"
                  }
                ],
                "message": "Restaurants fetched successfully"
              }
            }
          }
        }
      }
    }
  },
  "/customer/{restaurantId}": {
    "get": {
      "summary": "Get menu items for a specific restaurant",
      "tags": ["Customers"],
      "parameters": [
        {
          "name": "restaurantId",
          "in": "path",
          "required": true,
          "description": "The ID of the restaurant",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Menu items fetched successfully",
          "content": {
            "application/json": {
              "example": {
                "success": true,
                "data": [
                  {
                    "id": "63f21c84e7a51093c507d207",
                    "name": "Pasta",
                    "price": 12,
                    "isAvailable": true
                  },
                  {
                    "id": "63f21c84e7a51093c507d208",
                    "name": "Salad",
                    "price": 8,
                    "isAvailable": true
                  }
                ],
                "message": "Menu items fetched successfully"
              }
            }
          }
        },
        "404": {
          "description": "Restaurant not found",
          "content": {
            "application/json": {
              "example": {
                "success": false,
                "error_code": 404,
                "message": "Restaurant not found",
                "data": {}
              }
            }
          }
        }
      }
    }
  },
  "/customer/placeOrder": {
    "post": {
      "summary": "Place an order",
      "description": "Places an order for the items in the user's cart. If the cart is empty, it will return an error.",
      "operationId": "placeOrder",
      "tags": ["Customers"],
      "security": [
        {
          "BearerAuth": []
        }
      ],
      "requestBody": {
        "description": "No request body required. Cart details are fetched from the user's session.",
        "required": false
      },
      "responses": {
        "200": {
          "description": "Order placed successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order": {
                    "type": "object",
                    "properties": {
                      "userId": {
                        "type": "string",
                        "description": "ID of the user placing the order"
                      },
                      "restaurentId": {
                        "type": "string",
                        "description": "ID of the restaurant receiving the order"
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "ID of the item ordered"
                        }
                      },
                      "totalAmount": {
                        "type": "number",
                        "description": "Total amount of the order"
                      },
                      "status": {
                        "type": "string",
                        "description": "Current status of the order",
                        "enum": [
                          "placed",
                          "accepted",
                          "prepared",
                          "dispatched",
                          "delivered"
                        ]
                      },
                      "deliveryAddress": {
                        "type": "string",
                        "description": "Delivery address of the customer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Cart is empty, cannot place order",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Cart is empty, cannot place order"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User or customer details not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "User not found"
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized access, user not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "User not found, please login again"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
